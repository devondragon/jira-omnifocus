name: "Release"

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

jobs:
  validate-release:
    name: "Validate Release"
    runs-on: macos-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Run full test suite
        run: bundle exec rspec --format progress

      - name: Run security audit
        run: bundle exec bundler-audit --update

      - name: Run RuboCop
        run: bundle exec rubocop

      - name: Test script execution
        run: |
          echo "Testing main script can be executed..."
          bundle exec ruby -c bin/jiraomnifocus.rb
          echo "✅ Script validation passed"

  build-artifacts:
    name: "Build Release Artifacts"
    runs-on: macos-latest
    needs: validate-release
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true

      - name: Install dependencies
        run: bundle install

      - name: Generate documentation
        run: |
          bundle exec yard doc --output-dir release_docs
          echo "Documentation generated"

      - name: Create distribution package
        run: |
          mkdir -p release_package
          
          # Copy main files
          cp -r bin/ lib/ release_package/
          cp Gemfile Gemfile.lock release_package/
          cp README.md CHANGELOG.md release_package/ || echo "CHANGELOG.md not found"
          cp jofsync.yaml.sample release_package/
          
          # Copy documentation
          cp -r release_docs/ release_package/docs/
          
          echo "Release package created in release_package/"

      - name: Create tarball
        run: |
          version="${{ github.event.release.tag_name || github.event.inputs.version }}"
          tar -czf "jira-omnifocus-${version}.tar.gz" -C release_package .
          echo "Created jira-omnifocus-${version}.tar.gz"

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: |
            jira-omnifocus-*.tar.gz
            release_package/

  generate-changelog:
    name: "Generate Changelog"
    runs-on: macos-latest
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          echo "# Changelog" > CHANGELOG_GENERATED.md
          echo "" >> CHANGELOG_GENERATED.md
          echo "## ${{ github.event.release.tag_name }} - $(date +%Y-%m-%d)" >> CHANGELOG_GENERATED.md
          echo "" >> CHANGELOG_GENERATED.md
          
          # Get commits since last tag
          last_tag=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$last_tag" ]; then
            echo "### Changes since $last_tag:" >> CHANGELOG_GENERATED.md
            git log --pretty=format:"- %s (%h)" "$last_tag"..HEAD >> CHANGELOG_GENERATED.md
          else
            echo "### Changes:" >> CHANGELOG_GENERATED.md
            git log --pretty=format:"- %s (%h)" >> CHANGELOG_GENERATED.md
          fi
          
          echo "" >> CHANGELOG_GENERATED.md

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG_GENERATED.md

  post-release:
    name: "Post-release Tasks"
    runs-on: macos-latest
    needs: [validate-release, build-artifacts]
    if: github.event_name == 'release'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update development version
        run: |
          echo "Release ${{ github.event.release.tag_name }} has been published"
          echo "Consider updating version numbers for next development cycle"

      - name: Create release summary
        run: |
          echo "# Release Summary: ${{ github.event.release.tag_name }}" > release_summary.md
          echo "" >> release_summary.md
          echo "- ✅ Tests passed" >> release_summary.md
          echo "- ✅ Security audit clean" >> release_summary.md  
          echo "- ✅ Code quality checks passed" >> release_summary.md
          echo "- ✅ Release artifacts created" >> release_summary.md
          echo "- ✅ Documentation generated" >> release_summary.md
          echo "" >> release_summary.md
          echo "Release is ready for distribution!" >> release_summary.md

      - name: Upload release summary
        uses: actions/upload-artifact@v4
        with:
          name: release-summary
          path: release_summary.md